{
	"info": {
		"_postman_id": "503e827e-7e62-4d27-956b-860385e6d9f9",
		"name": "Team2_API_Challengers Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27934522",
		"_collection_link": "https://bold-crater-768586.postman.co/workspace/Team2-API-Challengers~50ab504b-75b2-4f51-9075-cab42f150949/collection/27934522-503e827e-7e62-4d27-956b-860385e6d9f9?action=share&source=collection_link&creator=27934522"
	},
	"item": [
		{
			"name": "User Login Controller",
			"item": [
				{
					"name": "User Authentication with valid login credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.clear;",
									"",
									"//Parsing the json response ",
									"var response=pm.response.json();",
									"console.log(response);",
									"",
									"//Set the token value from response",
									"pm.environment.set(\"Token\", response.token);",
									"pm.environment.set(\"Type\", response.type);",
									"",
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Json Schema ",
									"const expectedSchema=",
									"{",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"token\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"type\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"userId\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"email\": {",
									"      \"type\": \"string\"",
									"    },",
									"    \"roles\": {",
									"      \"type\": \"array\",",
									"      \"items\": [",
									"        {",
									"          \"type\": \"string\"",
									"        }",
									"      ]",
									"    },",
									"    \"status\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"token\",",
									"    \"type\",",
									"    \"userId\",",
									"    \"email\",",
									"    \"roles\",",
									"    \"status\"",
									"  ]",
									"};",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using AJV',  ()=> {",
									"    pm.response.to.have.jsonSchema(expectedSchema);  ",
									"});",
									"",
									"pm.test('Validating JSON Schema using Tiny Validator', function () {",
									"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
									"});",
									"",
									"//Validate Response Time",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmailId\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authentication with invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be Unauthorized\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Bad credentials\");",
									"    pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{invalidPassword}}\",\n  \"userLoginEmailId\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authentication with invalid Email Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be Unauthorized\", function () {",
									"    pm.response.to.have.status(\"Unauthorized\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Bad credentials\");",
									"    pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{password}}\",\n  \"userLoginEmailId\": \"{{invalidEmail}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authentication with missing password in request body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be Bad Request\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"Password is mandatory\");",
									"    pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \n  \"userLoginEmailId\": \"{{email}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Authentication with missing Email in Request body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be Bad Request\", function () {",
									"    pm.response.to.have.status(\"Bad Request\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.json().message).to.eql(\"EmailId is mandatory\");",
									"    pm.expect(pm.response.json().success).to.eql(false);",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"password\": \"{{password}}\"\n \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Add New Program",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var programName = \"Mar24-APIChallengers-DA-\" + pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"programNameP\", programName);\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response \r",
											"var response=pm.response.json();\r",
											"console.log(response);\r",
											"\r",
											"//Set Global Variables to be used by other requests\r",
											"let count1 = pm.collectionVariables.get(\"count\");\r",
											"// let iterationCount = pm.info.iteration+1;\r",
											"let iterationCount = parseInt(count1)+1;\r",
											"console.log(iterationCount);\r",
											"pm.collectionVariables.set(`programId${iterationCount}`, response.programId);\r",
											"pm.collectionVariables.set(`programName${iterationCount}`, response.programName);\r",
											"pm.collectionVariables.set(\"count\",iterationCount);\r",
											"//test header\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											"//console.log('ID1 set check:', pm.environment.get('ID1'))\r",
											"pm.environment.set('creationTime', response.creationTime)\r",
											"pm.environment.set('lastModTime', response.lastModTime)\r",
											"\r",
											"//pm.environment.set('status', response.status)\r",
											"\r",
											"//pm.variables.set('lastModTime',response.creationTime)\r",
											"\r",
											"pm.test('Status code is 201', function () {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"pm.test('Status code name has string \\'Created\\'', function () {\r",
											"    pm.expect(pm.response.status).to.equal('Created');\r",
											"})\r",
											"\r",
											"const expectedSchema = {\r",
											"    'programId': { 'type': 'integer' },\r",
											"    'programDescription': { 'type': 'string' },\r",
											"    'programName': { 'type': 'string' },\r",
											"    'programStatus': { 'type': 'string' }\r",
											"};\r",
											"\r",
											"pm.test('Validating JSON Schema', function () {\r",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\":\"{{PrgDesc2}}\",\r\n  \"programName\":\"{{programNameP}}\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all programs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Removed redundant tests\r",
											"pm.test(\"Content-Type header is application/json\", () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// Schema validation for the response\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"array\",\r",
											"    items: {\r",
											"      type: \"object\",\r",
											"      properties: {\r",
											"        programId: { type: \"number\" },\r",
											"        programName: { type: \"string\" },\r",
											"        programDescription: { type: \"string\" },\r",
											"        programStatus: { type: \"string\" },\r",
											"        creationTime: { type: \"string\" },\r",
											"        lastModTime: { type: \"string\" }\r",
											"      },\r",
											"      required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"]\r",
											"    }\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/allPrograms",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"allPrograms"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Program by programId1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an object with programId, programName, programDescription, programStatus, creationTime, and lastModTime properties\", function () {",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('programId', 'programName', 'programDescription', 'programStatus', 'creationTime', 'lastModTime');",
											"});",
											"",
											"console.log(\"id is \", jsonData.programId, pm.collectionVariables.get(\"programId1\"))",
											"pm.test(\"Verify data\", function() { ",
											"    console.log(\"ID1 set check:\", pm.collectionVariables.get(\"programName1\"));",
											"    pm.expect(jsonData.programId).to.eql(pm.collectionVariables.get(\"programId1\"));",
											"    pm.expect(jsonData.programName).to.eql(pm.collectionVariables.get(\"programName1\"));",
											"     pm.expect(jsonData.programStatus).to.eql(pm.collectionVariables.get(\"Status\"));",
											"     ",
											"});",
											"",
											"//test header",
											"pm.test('Content-Type header is present', () => {",
											"    pm.response.to.have.header('Content-Type');",
											"})",
											"",
											"pm.test('Content-Type header is application/json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"// Validate response schema",
											"pm.test(\"Schema is valid\", function () {",
											"  var schema = {",
											"    type: \"object\",",
											"    properties: {",
											"      programId: { type: \"number\" },",
											"      programName: { type: \"string\" },",
											"      programDescription: { type: \"string\" },",
											"      programStatus: { type: \"string\" },",
											"      creationTime: { type: \"string\" },",
											"      lastModTime: { type: \"string\" },",
											"    },",
											"    required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],",
											"  };",
											"",
											"",
											"  var response = pm.response.json();",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/programs/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"programs",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update program by program ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the status code is 200 \r",
											"pm.test(\"Status code is 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(pm.response.json())\r",
											"pm.environment.set('creationTime', pm.response.json().creationTime)\r",
											"pm.environment.set('lastModTime', pm.response.json().lastModTime)\r",
											"//pm.environment.set('Status1', pm.response.json().programStatus)\r",
											"console.log(pm.environment.get('Status1'))\r",
											"\r",
											"//test header\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											"//Check the string OK in status\r",
											"pm.test(\"Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Schema Validation\r",
											"var response=pm.response.json();\r",
											"const expectedSchema= {\r",
											"    \"programID\": {\r",
											"        \"type\": \"integer\"\r",
											"    },\r",
											"    \r",
											"    \"programDescription\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"        \"type\": \"string\"\r",
											"    }\r",
											"}\r",
											"               \r",
											"pm.test('Validating JSON Schema', function () {\r",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\":\"{{PrgDesc2}}\",\r\n   \"programName\":\"{{programName1}}\",\r\n  \"programStatus\":\"{{update_status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/putprogram/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"putprogram",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get program by id after updating record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											"var jsondata = pm.response.json();\r",
											"\r",
											"pm.test(\"Verify data\", function() { \r",
											"    console.log(jsondata)\r",
											"    pm.expect(jsondata.programId).to.eql(pm.collectionVariables.get(\"programId1\"));\r",
											"    pm.expect(jsondata.programStatus).to.eql(pm.environment.get(\"update_status\"));\r",
											"    pm.expect(jsondata.programDescription).to.eql(pm.collectionVariables.get(\"PrgDesc2\"))\r",
											"   \r",
											"});\r",
											"// Validate response schema\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      programId: { type: \"number\" },\r",
											"      programName: { type: \"string\" },\r",
											"      programDescription: { type: \"string\" },\r",
											"      programStatus: { type: \"string\" },\r",
											"      creationTime: { type: \"string\" },\r",
											"      lastModTime: { type: \"string\" },\r",
											"    },\r",
											"    required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],\r",
											"  };\r",
											"\r",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/programs/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"programs",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by ProgramName[Put Operation]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the status code is 200 \r",
											"pm.test(\"Status code is 200 \", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"console.log(pm.response.json())\r",
											"pm.environment.set('creationTime', pm.response.json().creationTime)\r",
											"pm.environment.set('lastModTime', pm.response.json().lastModTime)\r",
											"//pm.environment.set('Status1', pm.response.json().programStatus)\r",
											"console.log(pm.environment.get('Status1'))\r",
											"\r",
											"//test header\r",
											"pm.test('Content-Type header is present', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"})\r",
											"\r",
											"pm.test('Content-Type header is application/json', () => {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"})\r",
											"\r",
											"//Check the string OK in status\r",
											"pm.test(\"Status code name has string 'OK' \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"//Schema Validation\r",
											"var response=pm.response.json();\r",
											"const expectedSchema= {\r",
											"    \"programID\": {\r",
											"        \"type\": \"integer\"\r",
											"    },\r",
											"    \r",
											"    \"programDescription\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"programName\": {\r",
											"        \"type\": \"string\"\r",
											"    },\r",
											"    \"programStatus\": {\r",
											"        \"type\": \"string\"\r",
											"    }\r",
											"}\r",
											"               \r",
											"pm.test('Validating JSON Schema', function () {\r",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programName1}}\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programName1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programName1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs with users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Removed redundant tests\r",
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Content-Type header is present and application/json', () => {\r",
											"    pm.response.to.have.header('Content-Type');\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Test for the structure and values of the response body\r",
											"var responseJSON = pm.response.json();\r",
											"\r",
											"// Checking the response body structure and properties\r",
											"pm.test(\"Response body structure is valid\", function () {\r",
											"    pm.expect(responseJSON).to.be.an('array').that.is.not.empty;\r",
											"    responseJSON.forEach((program) => {\r",
											"        pm.expect(program).to.have.property('programId');\r",
											"        pm.expect(program).to.have.property('programName');\r",
											"        pm.expect(program).to.have.property('programDescription');\r",
											"        pm.expect(program).to.have.property('programStatus');\r",
											"        pm.expect(program).to.have.property('programUsers');\r",
											"        pm.expect(program).to.have.property('creationTime');\r",
											"        pm.expect(program).to.have.property('lastModTime');\r",
											"    });\r",
											"});\r",
											"/*\r",
											"// Add test to check for the presence of \"Ok\" string in the response\r",
											"pm.test(\"Response body contains 'Ok' string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Ok');\r",
											"}); */"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/allProgramsWithUsers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"allProgramsWithUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Program by ProgramName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Setting the value for the next module\r",
											"pm.collectionVariables.set(\"programId\",pm.collectionVariables.get(\"programId2\"));\r",
											"pm.collectionVariables.set(\"count\",0);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deletebyprogname/{{programName1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{{programName1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Program by deleted programId1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Response is an object with programId, programName, programDescription, programStatus, creationTime, and lastModTime properties\", function () {",
											"    pm.expect(jsonData).to.be.an('object').that.has.all.keys('programId', 'programName', 'programDescription', 'programStatus', 'creationTime', 'lastModTime');",
											"});",
											"",
											"console.log(\"id is \", jsonData.programId, pm.collectionVariables.get(\"programId1\"))",
											"pm.test(\"Verify data\", function() { ",
											"    console.log(\"ID1 set check:\", pm.environment.get(\"programName1\"));",
											"    pm.expect(jsonData.programId).to.eql(pm.collectionVariables.get(\"programId1\"));",
											"    pm.expect(jsonData.programName).to.eql(pm.collectionVariables.get(\"programName1\"));",
											"     pm.expect(jsonData.programStatus).to.eql(pm.collectionVariables.get(\"Status\"));",
											"     ",
											"});",
											"",
											"//test header",
											"pm.test('Content-Type header is present', () => {",
											"    pm.response.to.have.header('Content-Type');",
											"})",
											"",
											"pm.test('Content-Type header is application/json', () => {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"// Validate response schema",
											"pm.test(\"Schema is valid\", function () {",
											"  var schema = {",
											"    type: \"object\",",
											"    properties: {",
											"      programId: { type: \"number\" },",
											"      programName: { type: \"string\" },",
											"      programDescription: { type: \"string\" },",
											"      programStatus: { type: \"string\" },",
											"      creationTime: { type: \"string\" },",
											"      lastModTime: { type: \"string\" },",
											"    },",
											"    required: [\"programId\", \"programName\", \"programDescription\", \"programStatus\", \"creationTime\", \"lastModTime\"],",
											"  };",
											"",
											"",
											"  var response = pm.response.json();",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/programs/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"programs",
										"{{programId1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "Add New Program with only mandatory field values",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var programName = \"Mar24-APIChallengers-SDET-\" + pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"pm.environment.set(\"programNameP\", programName);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Schema is valid\", function () {",
											"  var schema = {",
											"    type: \"object\",",
											"    properties: {",
											"      message: { type: \"string\" },",
											"      success: { type: \"boolean\" }",
											"    },",
											"    required: [\"message\", \"success\"],",
											"  };",
											"",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"// Test to check if the response contains a specific header",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function() {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"programDescription\":\"\",\r\n  \"programName\": \"{{programNameP}}\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program with empty mandatory field programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Schema validation for the response\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      message: {\r",
											"        type: \"string\"\r",
											"      },\r",
											"      success: {\r",
											"        type: \"boolean\"\r",
											"      }\r",
											"    },\r",
											"    required: [\"message\", \"success\"],\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Test to check if the response contains a Content-Type header\r",
											"pm.test(\"Valid Content-Type header is present\", function() {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "  {\r\n    \"programDescription\": \"{{PrgDesc2}}\",\r\n  \"programName\": \"\",\r\n  \"programStatus\": \"{{Status}}\"\r\n  }\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program with empty mandatory field programStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"// Verify the response status code is 400\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Verify the response schema\r",
											"pm.test(\"Response schema is valid\", function () {\r",
											"    var schema = {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"            message: { type: \"string\" },\r",
											"            success: { type: \"boolean\" }\r",
											"        },\r",
											"        required: [\"message\", \"success\"]\r",
											"    };\r",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Verify the presence of the Content-Type header\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"programDescription\": \"Larn Postman API\",\r\n  \"programName\": \"POSTMAN API01\",\r\n  \"programStatus\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program where programName begins with number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"// Test for response schema",
											"pm.test(\"Response body has the expected schema\", function () {",
											"    var schema = {",
											"        type: \"object\",",
											"        properties: {",
											"            message: { type: \"string\" },",
											"            success: { type: \"boolean\" }",
											"        },",
											"        required: [\"message\", \"success\"]",
											"    };",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});",
											"",
											"// Test for Content-Type header",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \"programDescription\": \"{{PrgDesc2}}\",\r\n  \"programName\": \"10 POSTMAN API01\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program with  programStatus other than active or inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"// Test for response header",
											"pm.test(\"Response has Content-Type header with value 'application/json'\", function () {",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response body contains a non-empty 'message' field\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.message).to.exist.and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
											"});",
											"",
											"pm.test(\"Success property in the response body is a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \"programDescription\": \"{{PrgDesc1}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"ON\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program with existing program details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request'\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Schema validation for the response\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"    var schema = {\r",
											"        type: \"object\",\r",
											"        properties: {\r",
											"            message: {\r",
											"                type: \"string\"\r",
											"            },\r",
											"            success: {\r",
											"                type: \"boolean\"\r",
											"            }\r",
											"        },\r",
											"        required: [\"message\", \"success\"],\r",
											"    };\r",
											"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Test for the presence of Content-Type header\r",
											"pm.test(\"Content-Type header is present and has value 'application/json'\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{  \"programDescription\":\"{{PrgDesc1}}\",\r\n  \"programName\": \"Mar24-APIChallengers-SDET-22\",\r\n  \"programStatus\": \"{{Status1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New Program with missing field programStatus in Request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"// Check if the response contains the Content-Type header with value application/json",
											"pm.test(\"Response has valid Content-Type header\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"// Validate the response schema",
											"pm.test(\"Schema is valid\", function () {",
											"  var schema = {",
											"    type: \"object\",",
											"    properties: {",
											"      message: { type: \"string\" },",
											"      success: { type: \"boolean\" }",
											"    },",
											"    required: [\"message\", \"success\"],",
											"  };",
											"",
											"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"programDescription\": \"{{PrgDesc1}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add New program with Missing Authorization Token",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/saveprogram",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"saveprogram"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs by invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 \", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Not Found' \", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"// Test for response schema\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      timestamp: { type: \"string\" },\r",
											"      status: { type: \"number\" },\r",
											"      error: { type: \"string\" },\r",
											"      path: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"timestamp\", \"status\", \"error\", \"path\"],\r",
											"  };\r",
											"\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Test for response headers\r",
											"pm.test(\"Valid Content-Type header is present\", function() {\r",
											"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/Programs/{{invalidprogramID1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Programs",
										"{{invalidprogramID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs by invalid programId1",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/programs/{{invalidprogramID1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"programs",
										"{{invalidprogramID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Programs by Invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 \", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Not Found' \", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"// Test to check if the response contains the required properties\r",
											"pm.test(\"Response body structure is valid\", function () {\r",
											"    var responseJSON = pm.response.json();\r",
											"    pm.expect(responseJSON).to.have.property('timestamp');\r",
											"    pm.expect(responseJSON).to.have.property('status');\r",
											"    pm.expect(responseJSON).to.have.property('error');\r",
											"    pm.expect(responseJSON).to.have.property('path');\r",
											"});\r",
											"\r",
											"// Test to validate response schema\r",
											"pm.test(\"Schema is valid\", function () {\r",
											"  var schema = {\r",
											"    type: \"object\",\r",
											"    properties: {\r",
											"      timestamp: { type: \"string\" },\r",
											"      status: { type: \"number\" },\r",
											"      error: { type: \"string\" },\r",
											"      path: { type: \"string\" }\r",
											"    },\r",
											"    required: [\"timestamp\", \"status\", \"error\", \"path\"],\r",
											"  };\r",
											"  var response = pm.response.json();\r",
											"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
											"});\r",
											"\r",
											"// Test to check if the response contains a Content-Type header with value application/json\r",
											"pm.test(\"Response has Content-Type header with value application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/Programs/{{invalidprogramName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Programs",
										"{{invalidprogramName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attempting to retrieve program details without providing token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401 \", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"//Check the string Unauthorized in status\r",
											"pm.test(\"Status code name has string 'Unauthorized ' \", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/Programs/{{invalidprogramName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Programs",
										"{{invalidprogramName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"//Check the string Not Found in status",
											"pm.test(\"'Not Found' \", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"",
											"// Test to check if the response contains the Content-Type header with value application/json",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"});",
											"",
											"pm.test(\"Response has a message property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('message');",
											"});",
											"",
											"pm.test(\"Response has a success property\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('success');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programNameP}}\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{invalidprogramName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{invalidprogramName}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programName with empty mandatory field programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body includes 'programName must begin with alphabet and can contain only alphanumeric characters'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('programName must begin with alphabet and can contain only alphanumeric characters');\r",
											"});\r",
											"// Test to check if the response contains the correct Content-Type header\r",
											"pm.test(\"Response has Content-Type header set to application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\":\"{{PrgDesc3}}\",\r\n   \"programName\":\"\",\r\n  \"programStatus\":\"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programNameP}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programNameP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programName with only numeric value for programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"// Test to check if the response contains the Content-Type header with value application/json\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"1\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programNameP}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programNameP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programName with only special characters  for programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Test for the response message\r",
											"pm.test(\"Response message is not empty\", function () {\r",
											"    var responseData = pm.response.json();\r",
											"    pm.expect(responseData.message).to.not.be.empty;\r",
											"});\r",
											"// Check the string in status\r",
											"pm.test(\"Status code name has string 'programName must begin with alphabet and can contain only alphanumeric characters' \", function () {\r",
											"    pm.expect(pm.response.text()).to.include('programName must begin with alphabet and can contain only alphanumeric characters');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"@@@$%\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programNameP}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programNameP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programName with empty mandatory field programStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string  Bad Request\r",
											"pm.test(\"'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Test for the presence of message in the response\r",
											"pm.test(\"Response contains a message\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programNameP}}\",\r\n  \"programStatus\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programNameP}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programNameP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programName with  programStatus value other than active or inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"//Check the string in the response message\r",
											"pm.test(\"Response message contains a string\", function () {\r",
											"    pm.expect(pm.response.json().message).to.be.a('string').and.to.not.be.empty;\r",
											"});\r",
											"// Test for the success property in the response\r",
											"pm.test(\"Response has a success property\", function () {\r",
											"  pm.expect(pm.response.json()).to.have.property('success');\r",
											"  pm.expect(pm.response.json().success).to.be.a('boolean');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"no\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/program/{{programNameP}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"program",
										"{{programNameP}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update program by invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 \", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Not Found' \", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Test for the existence of message and success properties in the response\r",
											"pm.test(\"Response has message and success properties\", function () {\r",
											"    var responseJSON = pm.response.json();\r",
											"    pm.expect(responseJSON).to.have.property('message');\r",
											"    pm.expect(responseJSON).to.have.property('success');\r",
											"});\r",
											"// Check the string \"Not Found\" in status\r",
											"pm.test(\"'program with id134not found'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"program with id134not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programNameP}}\",\r\n  \"programStatus\": \"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/putprogram/{{invalidprogramID1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"putprogram",
										"{{invalidprogramID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programId with empty mandatory field programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Check if the response contains a message property\r",
											"pm.test(\"Response has a message property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Check if the response contains a success property\r",
											"pm.test(\"Response has a success property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('success');\r",
											"});\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\":\"{{PrgDesc3}}\",\r\n   \"programName\":\"\",\r\n  \"programStatus\":\"{{Status}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/putprogram/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"putprogram",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programId with only special characters  for programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"\r",
											"// Test for the presence of message and success properties in the response\r",
											"pm.test(\"Response has message and success properties\", function () {\r",
											"    var responseJSON = pm.response.json();\r",
											"    pm.expect(responseJSON).to.have.property('message');\r",
											"    pm.expect(responseJSON).to.have.property('success');\r",
											"});\r",
											"//Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"@@#$\",\r\n  \"programStatus\": \"{{Status2}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/putprogram/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"putprogram",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Program by programId with empty mandatory field programStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"//Check the string Not found in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Test for the content type header\r",
											"pm.test(\"Content-Type header is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
											"});\r",
											"// Check if the response has a message property\r",
											"pm.test(\"Response has a 'message' property\", function () {\r",
											"    pm.expect(pm.response.json()).to.have.property('message');\r",
											"});\r",
											"\r",
											"// Check if the 'success' property is a boolean\r",
											"pm.test(\"Response 'success' property is a boolean\", function () {\r",
											"    pm.expect(pm.response.json().success).to.be.a('boolean');\r",
											"});\r",
											"// Check the string Bad Request in status\r",
											"pm.test(\"Status code name has string 'Bad Request' \", function () {\r",
											"    pm.expect(pm.response.status).to.include('Bad Request');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"programDescription\": \"{{PrgDesc3}}\",\r\n   \"programName\": \"{{programNameP}}\",\r\n  \"programStatus\":\"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/putprogram/{{programId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"putprogram",
										"{{programId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  Program by invalid programId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\",  () =>{",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", () =>{",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"",
											"//Validate Status Code",
											"pm.test(\"Checking status 404\",()=>{",
											"     pm.response.to.have.status(404);",
											"})",
											"",
											"//Validate Status Code Text",
											"pm.test(\"Status should be Not Found\", ()=> {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"//Validate Response Body data",
											"const res=pm.response.json();",
											"console.log(res)",
											"pm.test(\"Checking error message\", ()=>{",
											"    pm.expect(res).to.be.an('object');",
											"    pm.expect(res.message).to.contains(\"no record found with programId\");",
											"    pm.expect(res.success).to.eql(false);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deletebyprogid/{{invalidprogramID1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deletebyprogid",
										"{{invalidprogramID1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete  Program by invalid programName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\",  () =>{",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", () =>{",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"",
											"//Validate Status Code",
											"pm.test(\"Checking status 404\",()=>{",
											"     pm.response.to.have.status(404);",
											"})",
											"",
											"//Validate Status Code Text",
											"pm.test(\"Status should be Not Found\", ()=> {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"//Validate Response Body data",
											"const res=pm.response.json();",
											"console.log(res)",
											"pm.test(\"Checking error message\", ()=>{",
											"    pm.expect(res).to.be.an('object');",
											"    pm.expect(res.message).to.contains(\"no record found with programName\");",
											"    pm.expect(res.success).to.eql(false);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/deletebyprogname/{{invalidprogramName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"deletebyprogname",
										"{{invalidprogramName}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create New Batch",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// var batchName1 = \"Mar24-APIChallengers-DA-\" + pm.variables.replaceIn(\"{{$randomInt}}\");\r",
											"// pm.collectionVariables.set(\"batchName\",batchName1);\r",
											"\r",
											"// pm.collectionVariables.set(\"batchClasses\", [10,25]);\r",
											"\r",
											"// pm.collectionVariables.set(\"description\",[\"batch Description one for Mar24-APIChallengers-DA\",\"batch Description two for Mar24-APIChallengers-SDET\"])\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var bname=pm.collectionVariables.get(\"batchName\")\r",
											"// var classno=pm.collectionVariables.get(\"batchClasses\");\r",
											"// var desc=pm.collectionVariables.get(\"description\");\r",
											"// if(bname.includes(\"SDET\")){\r",
											"//     pm.collectionVariables.set(\"batchNoOfClasses\",classno[1]);\r",
											"//     pm.collectionVariables.set(\"batchDescription\",desc[1]);\r",
											"// }\r",
											"// else{\r",
											"//     pm.collectionVariables.set(\"batchNoOfClasses\",classno[0]);\r",
											"//     pm.collectionVariables.set(\"batchDescription\",desc[0]);\r",
											"// }\r",
											"\r",
											"\r",
											"//Parsing the json response \r",
											"var response=pm.response.json();\r",
											"console.log(response);\r",
											"\r",
											"//Set Global Variables to be used by other requests\r",
											"let count1 = pm.collectionVariables.get(\"count\");\r",
											"// let iterationCount = pm.info.iteration+1;\r",
											"let iterationCount = parseInt(count1)+1;\r",
											"console.log(iterationCount);\r",
											"pm.collectionVariables.set(`batchId${iterationCount}`, response.batchId);\r",
											"pm.collectionVariables.set(`batchName${iterationCount}`, response.batchName);\r",
											"pm.collectionVariables.set(`batchStatus${iterationCount}`, response.batchStatus);\r",
											"pm.collectionVariables.set(\"count\",iterationCount);\r",
											"\r",
											"\r",
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 201\",()=>{\r",
											"     pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Created\", ()=> {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"// var res=pm.response.json();\r",
											"// pm.environment.set(\"batchId\",res.batchId);\r",
											"// pm.environment.set(\"batchName\",res.batchName);\r",
											"// pm.environment.set(\"programId\",res.programId);\r",
											"\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(response, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches with valid Search String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"\r",
											"// if(batchIds && batchIds.length > 0){\r",
											"//     console.log(\"next calling\" + batchIds);\r",
											"//     postman.setNextRequest(\"Get Batches By Batch Id\");\r",
											"// }\r",
											"// else{\r",
											"//     postman.setNextRequest(null);\r",
											"// }\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"var search=pm.variables.get(\"teamName\");\r",
											"var res=pm.response.json();\r",
											"pm.test(\"Checking whether Batch name contains the search string\",()=>{\r",
											"    pm.expect(res[0].batchName).to.contains(search);\r",
											"})\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"array\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 150ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// console.log(\"pre-req\");\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"// if(!batchIds){\r",
											"//     batchIds=[\"8591\",\"8566\",\"8568\",\"8478\"];\r",
											"// }\r",
											"//     var currentBatchId=batchIds.shift();\r",
											"//     pm.environment.set(\"batchId\",currentBatchId);\r",
											"//     pm.environment.set(\"batchIds\",batchIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches?searchString={{teamName}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "searchString",
											"value": "{{teamName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches with  invalid Search String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"\r",
											"// if(batchIds && batchIds.length > 0){\r",
											"//     console.log(\"next calling\" + batchIds);\r",
											"//     postman.setNextRequest(\"Get Batches By Batch Id\");\r",
											"// }\r",
											"// else{\r",
											"//     postman.setNextRequest(null);\r",
											"// }\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"array\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 150ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// console.log(\"pre-req\");\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"// if(!batchIds){\r",
											"//     batchIds=[\"8591\",\"8566\",\"8568\",\"8478\"];\r",
											"// }\r",
											"//     var currentBatchId=batchIds.shift();\r",
											"//     pm.environment.set(\"batchId\",currentBatchId);\r",
											"//     pm.environment.set(\"batchIds\",batchIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches?searchString={{invalidSearchString}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "searchString",
											"value": "{{invalidSearchString}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Batch Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"array\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 100ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(100);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/batchName/{{batchName1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchName",
										"{{batchName1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Program Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"array\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/program/{{programId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"program",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});    \r",
											"\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 250ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"{{batchDesc}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus2}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Batch Id  without Search String",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"\r",
											"// if(batchIds && batchIds.length > 0){\r",
											"//     console.log(\"next calling\" + batchIds);\r",
											"//     postman.setNextRequest(\"Get Batches By Batch Id\");\r",
											"// }\r",
											"// else{\r",
											"//     postman.setNextRequest(null);\r",
											"// }\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome5\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome5\": {\r",
											"            \"type\": \"object\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome5\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 150ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(150);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// console.log(\"pre-req\");\r",
											"\r",
											"// var batchIds=pm.environment.get(\"batchIds\");\r",
											"// if(!batchIds){\r",
											"//     batchIds=[\"8591\",\"8566\",\"8568\",\"8478\"];\r",
											"// }\r",
											"//     var currentBatchId=batchIds.shift();\r",
											"//     pm.environment.set(\"batchId\",currentBatchId);\r",
											"//     pm.environment.set(\"batchIds\",batchIds);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/batchId/{{batchId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchId",
										"{{batchId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Batch by valid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"// pm.test(\"Response body should be JSON\", () =>{\r",
											"//   pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// Setting the value for the next module\r",
											"pm.collectionVariables.set(\"BatchUserId2\",pm.collectionVariables.get(\"batchId2\"));\r",
											"pm.collectionVariables.set(\"count\",0);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 200\",()=>{\r",
											"     pm.response.to.have.status(200);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be OK\", ()=> {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"// JSON schema validation\r",
											"const expectedJsonShema={\r",
											"    \"$ref\": \"#/definitions/Welcome1\",\r",
											"    \"definitions\": {\r",
											"        \"Welcome1\": {\r",
											"            \"type\": \"array\",\r",
											"            \"additionalProperties\": false,\r",
											"            \"properties\": {\r",
											"                \"batchId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"batchName\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchDescription\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchStatus\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"batchNoOfClasses\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programId\": {\r",
											"                    \"type\": \"integer\"\r",
											"                },\r",
											"                \"programName\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"batchDescription\",\r",
											"                \"batchId\",\r",
											"                \"batchName\",\r",
											"                \"batchNoOfClasses\",\r",
											"                \"batchStatus\",\r",
											"                \"programId\",\r",
											"                \"programName\"\r",
											"            ],\r",
											"            \"title\": \"Welcome1\"\r",
											"        }\r",
											"    }\r",
											"}\r",
											"\r",
											"var res=pm.response.json();\r",
											"pm.test('Validating JSON schema', () =>{\r",
											"    pm.response.to.have.jsonSchema(expectedJsonShema);\r",
											"});\r",
											"\r",
											"pm.test(\"Validating JSON Schema using Tiny validator\", ()=>{\r",
											"    pm.expect(tv4.validate(res, expectedJsonShema)).to.be.true;\r",
											"})\r",
											"\r",
											"// pm.test(\"Response time is less than 500ms\", () => {\r",
											"//     pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create New Batch invalid no of classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"No of Classes is needed; It should be a positive number\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": -1,\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch missing no of classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"No of Classes is needed; It should be a positive number\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": \"\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch invalid program id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"Program not found with Id :\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{batchId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch missing program id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"ProgramId field is needed; It should be a positive number\");\r",
											"       pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch invalid batch name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"batchName must begin with alphabet and can contain only alphanumeric characters\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{$randomInt}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch missing batch name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"batchName must begin with alphabet and can contain only alphanumeric characters\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch invalid batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{programName}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Batch missing batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"Batch status is needed\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Batch Id with invalid batch id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"Batch not found with Id :\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var negativeBatchId = parseInt(\"{{$randomInt}}\");\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/batchId/5",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchId",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Batch Name with invalid batch name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"not found\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/batchName/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"batchName",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches By Program Id with invalid program id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"not found\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/program/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"program",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by invalid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"Batch not found with Id :\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{programId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{programId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id invalid no of classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Status code is 400\",  () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"No of Classes is needed; It should be a positive number\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": -1,\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id missing no of classes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Status code is 400\",  () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", () => {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"No of Classes is needed; It should be a positive number\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": \"\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id invalid program id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"Program not found with Id :\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{batchId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id missing program id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"ProgramId field is needed; It should be a positive number\");\r",
											"       pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\":\"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id invalid batch name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"batchName must begin with alphabet and can contain only alphanumeric characters\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{$randomInt}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id missing batch name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.eql(\"batchName must begin with alphabet and can contain only alphanumeric characters\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id invalid batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{$randomAlphaNumeric}}\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update by Batch Id missing batch status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 400\",()=>{\r",
											"     pm.response.to.have.status(400);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Bad Request\", ()=> {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res.message).to.eql(\"Batch status is needed\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"batchDescription\":\"updated description {{batchName}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\": {{batchNoOfClasses}},\r\n  \"batchStatus\": \"\",\r\n  \"programId\": {{programId}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/batches/{{batchId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{batchId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Batch by invalid Batch Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Response Header\r",
											"pm.test(\"Content-Type is present\",  () =>{\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
											"});\r",
											"\r",
											"//Validate Response Body Type\r",
											"pm.test(\"Response body should be JSON\", () =>{\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//Validate Response Header value\r",
											"pm.test(\"Content-type header is application/json\",  ()=> {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
											"});\r",
											"\r",
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Checking status 404\",()=>{\r",
											"     pm.response.to.have.status(404);\r",
											"})\r",
											"\r",
											"//Validate Status Code Text\r",
											"pm.test(\"Status should be Not Found\", ()=> {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"\r",
											"//Validate Response Body data\r",
											"const res=pm.response.json();\r",
											"console.log(res)\r",
											"pm.test(\"Checking error message\", ()=>{\r",
											"    pm.expect(res).to.be.an('object');\r",
											"    pm.expect(res.message).to.contains(\"No record found with batchId\");\r",
											"    pm.expect(res.success).to.eql(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/batches/{{programId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"batches",
										"{{programId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{Token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Positive Scenarios",
					"item": [
						{
							"name": "Create Users with Admin Staff Student Roles-Data Driven",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Set Global Variables to be used by other requests",
											"let count1 = pm.collectionVariables.get(\"count\");",
											"//let iterationCount = pm.info.iteration+1;",
											"let iterationCount = parseInt(count1)+1;",
											"console.log(iterationCount);",
											"pm.collectionVariables.set(`userId${iterationCount}`, response.userId);",
											"pm.collectionVariables.set(\"count\",iterationCount);",
											"//pm.globals.set(`userId-${pm.info.iteration + 1}`, JSON.stringify(response.userId));",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"//Validate Status Code Text",
											"pm.test(\"Status should be Created\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"//Validate userId starts with U",
											"pm.test(\"Auto-created userId should have U\", () => {",
											"    pm.expect(response.userId).to.contain('U');",
											"});",
											"",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"title\": \"Generated schema for Root\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"userId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userFirstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userMiddleName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userPhoneNumber\": {",
											"      \"type\": \"number\"",
											"    },",
											"    \"userLocation\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userTimeZone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLinkedinUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduUg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduPg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userComments\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userVisaStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLoginEmail\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"userId\",",
											"    \"userFirstName\",",
											"    \"userLastName\",",
											"    \"userMiddleName\",",
											"    \"userPhoneNumber\",",
											"    \"userLocation\",",
											"    \"userTimeZone\",",
											"    \"userLinkedinUrl\",",
											"    \"userEduUg\",",
											"    \"userEduPg\",",
											"    \"userComments\",",
											"    \"userVisaStatus\",",
											"    \"userLoginEmail\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const phoneNumber = Math.floor(Math.random() * 10000000000);",
											"pm.collectionVariables.set(\"userPhoneNo\", phoneNumber);",
											"",
											"var email =( \"APIChallengersDeeTeam\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");",
											"pm.collectionVariables.set(\"userLoginEmail\",email);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userComments\": \"{{userComments}}\",\n  \"userEduPg\": \"{{userEduPg}}\",\n  \"userEduUg\": \"{{userEduUg}}\",\n  \"userFirstName\": \"{{userFirstName}}\",\n  \"userId\": \"\",\n  \"userLastName\": \"{{userLastName}}\",\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n  \"userLocation\": \"{{userLocation}}\",\n  \"userLogin\": {\n    \"loginStatus\": \"{{status}}\",\n    \"password\": \"1234\",\n    \"roleIds\": [\n      \"{{roleId}}\"\n    ],\n    \"status\": \"{{status}}\",\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\n  },\n  \"userMiddleName\": \"{{userMiddleName}}\",\n  \"userPhoneNumber\": {{userPhoneNo}},\n  \"userRoleMaps\": [\n    {\n      \"roleId\": \"{{roleId}}\",\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\n    }\n  ],\n  \"userTimeZone\": \"{{userTimeZone}}\",\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleStatus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userFirstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userPhoneNumber\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"userLocation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userTimeZone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLinkedinUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduUg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduPg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userVisaStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLoginEmail\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userId\",",
											"        \"userFirstName\",",
											"        \"userLastName\",",
											"        \"userPhoneNumber\",",
											"        \"userLocation\",",
											"        \"userTimeZone\",",
											"        \"userLinkedinUrl\",",
											"        \"userEduUg\",",
											"        \"userEduPg\",",
											"        \"userVisaStatus\",",
											"        \"userLoginEmail\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update  User Information-Admin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const phoneNumber = Math.floor(Math.random() * 10000000000);",
											"pm.collectionVariables.set(\"userPhoneNo\", phoneNumber);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Set Global Variables to be used by other requests",
											"let iterationCount = pm.info.iteration+1;",
											"console.log(iterationCount);",
											"pm.globals.set(`userId${iterationCount}`, response.userId);",
											"pm.globals.set(`userPhoneNumber_${iterationCount}`, response.userId);",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate userId starts with U",
											"pm.test(\"Auto-created userId should start with letter U\", () => {",
											"    pm.expect(response.userId).to.contain('U');",
											"});",
											"",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
											"  \"title\": \"Generated schema for Root\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"userId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userFirstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userMiddleName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userPhoneNumber\": {",
											"      \"type\": \"number\"",
											"    },",
											"    \"userLocation\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userTimeZone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLinkedinUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduUg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduPg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userComments\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userVisaStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLoginEmail\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"userId\",",
											"    \"userFirstName\",",
											"    \"userLastName\",",
											"    \"userMiddleName\",",
											"    \"userPhoneNumber\",",
											"    \"userLocation\",",
											"    \"userTimeZone\",",
											"    \"userLinkedinUrl\",",
											"    \"userEduUg\",",
											"    \"userEduPg\",",
											"    \"userComments\",",
											"    \"userVisaStatus\",",
											"    \"userLoginEmail\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userComments\": \"{{putUserComments}}\",\n  \"userEduPg\": \"{{putuserEduPg}}\",\n  \"userEduUg\": \"{{putuserEduUg}}\",\n  \"userFirstName\": \"{{putuserFirstName}}\",\n  \"userLastName\": \"{{putuserLastName}}\",\n  \"userLinkedinUrl\": \"{{putuserLinkedinUrl}}\",\n  \"userLocation\": \"{{putuserLocation}}\",\n  \"userLoginEmail\": \"{{userLoginEmail}}\",\n  \"userMiddleName\": \"{{putUserMiddleName}}\",\n  \"userPhoneNumber\": {{userPhoneNo}},\n  \"userTimeZone\": \"{{putTimeZone}}\",\n  \"userVisaStatus\": \"{{putVisaStatus}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/{{userId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User Information by UserId-Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"if(response)",
											"{",
											"    pm.environment.set(\"roleIdAdmin\", response.roles[0].roleId);",
											"     pm.environment.set(\"roleStatusAdmin\", response.roles[0].roleId);",
											"}",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"user\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userFirstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userMiddleName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userPhoneNumber\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"userLocation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userTimeZone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLinkedinUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduUg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduPg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userComments\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userVisaStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLoginEmail\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userId\",",
											"        \"userFirstName\",",
											"        \"userLastName\",",
											"        \"userMiddleName\",",
											"        \"userPhoneNumber\",",
											"        \"userLocation\",",
											"        \"userTimeZone\",",
											"        \"userLinkedinUrl\",",
											"        \"userEduUg\",",
											"        \"userEduPg\",",
											"        \"userComments\",",
											"        \"userVisaStatus\",",
											"        \"userLoginEmail\"",
											"      ]",
											"    },",
											"    \"roles\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"roleId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userRoleStatus\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"roleId\",",
											"            \"userRoleStatus\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"user\",",
											"    \"roles\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User Information by UserId-Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"if(response)",
											"{",
											"    pm.environment.set(\"roleIdAdmin\", response.roles[0].roleId);",
											"     pm.environment.set(\"roleStatusAdmin\", response.roles[0].roleId);",
											"}",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"user\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userFirstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userMiddleName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userPhoneNumber\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"userLocation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userTimeZone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLinkedinUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduUg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduPg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userComments\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userVisaStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLoginEmail\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userId\",",
											"        \"userFirstName\",",
											"        \"userLastName\",",
											"        \"userMiddleName\",",
											"        \"userPhoneNumber\",",
											"        \"userLocation\",",
											"        \"userTimeZone\",",
											"        \"userLinkedinUrl\",",
											"        \"userEduUg\",",
											"        \"userEduPg\",",
											"        \"userComments\",",
											"        \"userVisaStatus\",",
											"        \"userLoginEmail\"",
											"      ]",
											"    },",
											"    \"roles\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"roleId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userRoleStatus\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"roleId\",",
											"            \"userRoleStatus\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"user\",",
											"    \"roles\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User Information by UserId-Student",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"if(response)",
											"{",
											"    pm.environment.set(\"roleIdAdmin\", response.roles[0].roleId);",
											"     pm.environment.set(\"roleStatusAdmin\", response.roles[0].roleId);",
											"}",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"user\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userFirstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userMiddleName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userPhoneNumber\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"userLocation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userTimeZone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLinkedinUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduUg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduPg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userComments\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userVisaStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLoginEmail\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userId\",",
											"        \"userFirstName\",",
											"        \"userLastName\",",
											"        \"userMiddleName\",",
											"        \"userPhoneNumber\",",
											"        \"userLocation\",",
											"        \"userTimeZone\",",
											"        \"userLinkedinUrl\",",
											"        \"userEduUg\",",
											"        \"userEduPg\",",
											"        \"userComments\",",
											"        \"userVisaStatus\",",
											"        \"userLoginEmail\"",
											"      ]",
											"    },",
											"    \"roles\": {",
											"      \"type\": \"array\",",
											"      \"items\": [",
											"        {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"roleId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userRoleStatus\": {",
											"              \"type\": \"string\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"roleId\",",
											"            \"userRoleStatus\"",
											"          ]",
											"        }",
											"      ]",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"user\",",
											"    \"roles\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId3}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/roles",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE User RoleId-User1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 200 or 400\",  () =>{",
											"  pm.expect(pm.response.code).to.be.oneOf([200,400])",
											"});",
											"",
											"//Validate Response Body",
											"if(response.code==\"200\")",
											"{",
											"pm.test(\"Validating Status 200  Response Body\", ()=> {",
											"  pm.expect(pm.response.text()).to.eql(\"Role Id Updated for User: \"+pm.globals.get(\"userId1\")); ",
											"});",
											"}",
											"else(response.code==\"400\")",
											"{",
											"pm.test(\"Validating 400 Response Body\", ()=> {",
											"      pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role2\")+\"already exists for user \"+pm.globals.get(\"userId1\"));",
											"       pm.expect(pm.response.json().success).to.eql(false);",
											"});",
											"",
											"}",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    \"{{Role2}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleId/{{userId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Users by RoleId-R01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"array\",",
											"  \"properties\": {",
											"    \"userId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userFirstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userMiddleName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userPhoneNumber\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"userLocation\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userTimeZone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLinkedinUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduUg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduPg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userComments\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userVisaStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLoginEmail\": {",
											"      \"type\": \"null\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"userId\",",
											"    \"userFirstName\",",
											"    \"userLastName\",",
											"    \"userMiddleName\",",
											"    \"userPhoneNumber\",",
											"    \"userLocation\",",
											"    \"userTimeZone\",",
											"    \"userLinkedinUrl\",",
											"    \"userEduUg\",",
											"    \"userEduPg\",",
											"    \"userComments\",",
											"    \"userVisaStatus\",",
											"    \"userLoginEmail\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/roles/{{Role1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roles",
										"{{Role1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE User RoleId-User2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 200 or 400\",  () =>{",
											"  pm.expect(pm.response.code).to.be.oneOf([200,400])",
											"});",
											"",
											"//Validate Response Body",
											"if(response.code==\"200\")",
											"{",
											"pm.test(\"Validating Status 200  Response Body\", ()=> {",
											"  pm.expect(pm.response.text()).to.eql(\"Role Id Updated for User: \"+pm.globals.get(\"userId2\")); ",
											"});",
											"}",
											"else(response.code==\"400\")",
											"{",
											"pm.test(\"Validating 400 Response Body\", ()=> {",
											"      pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role3\")+\"already exists for user \"+pm.globals.get(\"userId2\"));",
											"       pm.expect(pm.response.json().success).to.eql(false);",
											"});",
											"",
											"}",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    \"{{Role3}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleId/{{userId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Users by RoleId-R02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"array\",",
											"  \"properties\": {",
											"    \"userId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userFirstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userMiddleName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userPhoneNumber\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"userLocation\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userTimeZone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLinkedinUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduUg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduPg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userComments\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userVisaStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLoginEmail\": {",
											"      \"type\": \"null\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"userId\",",
											"    \"userFirstName\",",
											"    \"userLastName\",",
											"    \"userMiddleName\",",
											"    \"userPhoneNumber\",",
											"    \"userLocation\",",
											"    \"userTimeZone\",",
											"    \"userLinkedinUrl\",",
											"    \"userEduUg\",",
											"    \"userEduPg\",",
											"    \"userComments\",",
											"    \"userVisaStatus\",",
											"    \"userLoginEmail\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/roles/{{Role2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roles",
										"{{Role2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE User RoleId-User3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 200 or 400\",  () =>{",
											"  pm.expect(pm.response.code).to.be.oneOf([200,400])",
											"});",
											"",
											"//Validate Response Body",
											"if(response.code==\"200\")",
											"{",
											"pm.test(\"Validating Status 200  Response Body\", ()=> {",
											"  pm.expect(pm.response.text()).to.include(\"Role Id Updated for User: \"); ",
											"});",
											"}",
											"else(response.code==\"400\")",
											"{",
											"pm.test(\"Validating 400 Response Body\", ()=> {",
											"      pm.expect(pm.response.json().message).to.include(\"Role \"+\"already exists for user \"+pm.globals.get(\"userId3\"));",
											"       pm.expect(pm.response.json().success).to.eql(false);",
											"});",
											"",
											"}",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userRoleList\": [\n    \"{{Role1}}\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleId/{{userId3}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleId",
										"{{userId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Users by RoleId-R03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"array\",",
											"  \"properties\": {",
											"    \"userId\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userFirstName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLastName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userMiddleName\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userPhoneNumber\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"userLocation\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userTimeZone\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLinkedinUrl\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduUg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userEduPg\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userComments\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userVisaStatus\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"userLoginEmail\": {",
											"      \"type\": \"null\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"userId\",",
											"    \"userFirstName\",",
											"    \"userLastName\",",
											"    \"userMiddleName\",",
											"    \"userPhoneNumber\",",
											"    \"userLocation\",",
											"    \"userTimeZone\",",
											"    \"userLinkedinUrl\",",
											"    \"userEduUg\",",
											"    \"userEduPg\",",
											"    \"userComments\",",
											"    \"userVisaStatus\",",
											"    \"userLoginEmail\"",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/roles/{{Role3}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roles",
										"{{Role3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign or UPDATE User Role Program Batch status",
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {\n  \"programId\": {{programId2}},\n  \"roleId\": \"{{Role3}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{BatchUserId2}},\n      \"userRoleProgramBatchStatus\": \"{{status}}\"\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}//users/roleProgramBatchStatus/{{userId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"",
										"users",
										"roleProgramBatchStatus",
										"{{userId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET User by Program Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userFirstName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLastName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userMiddleName\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userPhoneNumber\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"userLocation\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userTimeZone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLinkedinUrl\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduUg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userEduPg\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userComments\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userVisaStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userLoginEmail\": {",
											"          \"type\": \"null\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userId\",",
											"        \"userFirstName\",",
											"        \"userLastName\",",
											"        \"userMiddleName\",",
											"        \"userPhoneNumber\",",
											"        \"userLocation\",",
											"        \"userTimeZone\",",
											"        \"userLinkedinUrl\",",
											"        \"userEduUg\",",
											"        \"userEduPg\",",
											"        \"userComments\",",
											"        \"userVisaStatus\",",
											"        \"userLoginEmail\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/programBatch/{{BatchIdUser2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"programBatch",
										"{{BatchIdUser2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UPDATE  User Role  Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"",
											"//Validate Status Code",
											"pm.test(\"Status code is 200 or 400\",  () =>{",
											"  pm.expect(pm.response.code).to.be.oneOf([200,400])",
											"});",
											"",
											"//Validate Status Code Text",
											"if(response.code==\"400\")",
											"{",
											"pm.test(\"Validating 400 Response Body\", ()=> {",
											"    pm.expect(pm.response.json().status).to.eql(\"400 Bad request\");",
											"      pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role3\")+\"already exists for user \"+pm.globals.get(\"userId2\"));",
											"});",
											"}",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"roleId\": \"{{Role3}}\",\n  \"userRoleStatus\": \"{{status}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/roleStatus/{{userId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roleStatus",
										"{{userId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET All Users with Roles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});",
											"",
											"//Parsing the json response ",
											"var response=pm.response.json();",
											"console.log(response);",
											"",
											"//Json Schema ",
											"const expectedSchema=",
											"{",
											" ",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"userRoleId\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"user\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"userId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userFirstName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userLastName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userMiddleName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userPhoneNumber\": {",
											"              \"type\": \"integer\"",
											"            },",
											"            \"userLocation\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userTimeZone\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userLinkedinUrl\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userEduUg\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userEduPg\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userComments\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"userVisaStatus\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"hibernateLazyInitializer\": {",
											"              \"type\": \"object\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"userId\",",
											"            \"userFirstName\",",
											"            \"userLastName\",",
											"            \"userMiddleName\",",
											"            \"userPhoneNumber\",",
											"            \"userLocation\",",
											"            \"userTimeZone\",",
											"            \"userLinkedinUrl\",",
											"            \"userEduUg\",",
											"            \"userEduPg\",",
											"            \"userComments\",",
											"            \"userVisaStatus\",",
											"            \"hibernateLazyInitializer\"",
											"          ]",
											"        },",
											"        \"role\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"roleId\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"roleName\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"roleDesc\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"creationTime\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"lastModTime\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"hibernateLazyInitializer\": {",
											"              \"type\": \"object\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"roleId\",",
											"            \"roleName\",",
											"            \"roleDesc\",",
											"            \"creationTime\",",
											"            \"lastModTime\",",
											"            \"hibernateLazyInitializer\"",
											"          ]",
											"        },",
											"        \"userRoleStatus\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"userId\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"userRoleId\",",
											"        \"user\",",
											"        \"role\",",
											"        \"userRoleStatus\",",
											"        \"userId\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"//JSON Schema Validation",
											"pm.test('Validating JSON Schema using AJV',  ()=> {",
											"    pm.response.to.have.jsonSchema(expectedSchema);  ",
											"});",
											"",
											"pm.test('Validating JSON Schema using Tiny Validator', function () {",
											"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/roles",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET count of active and inactive users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/byStatus",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"byStatus"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Users for Program",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/programs/{{programId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"programs",
										"{{programId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User Login Status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const ranNum = Math.floor(Math.random() * 10000000000);\r",
											"\r",
											"\r",
											"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
											"pm.variables.set(\"userLoginEmail_login_S\",email);\r",
											"\r",
											"pm.variables.set(\"loginStatus_login_S\",\"Active\");\r",
											"pm.variables.set(\"password_login_S\",ranNum);\r",
											"pm.variables.set(\"roleIds_login_S\",\"R01\");\r",
											"pm.variables.set(\"status_login_S\",\"Active\");\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate Status Code\r",
											"pm.test(\"Status code is 200 or 400\",  () =>{\r",
											"  pm.expect(pm.response.code).to.be.oneOf([200,400])\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"loginStatus\": \"{{loginStatus_login_S}}\",\n  \"password\": \"{{password_login_S}}\",\n  \"roleIds\": [\n    \"{{roleIds_login_S}}\"\n  ],\n  \"status\": \"{{status_login_S}}\",\n  \"userLoginEmail\": \"{{userLoginEmail_login_S}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/userLogin/{{userId2}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"userLogin",
										"{{userId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Active Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/activeUsers",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"activeUsers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Users by Role id V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Header",
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Connection header is keep-alive\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
											"});",
											"",
											"//Validate Response Body Type",
											"pm.test(\"Response body should be JSON\", function () {",
											"  pm.response.to.be.json;",
											"});",
											"",
											"//Validate Response Header value",
											"pm.test(\"Content-type header is application/json\",  ()=> {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/v2/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate Status Code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"//Validate Status Code Text",
											"pm.test(\"Status should be OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"//Validate Response Body data",
											"pm.test(\"Validating Response body message\", ()=> {",
											"    pm.expect(pm.response.text()).to.include(\"Deleted User ID:  \");",
											"   ",
											"});",
											"",
											"// Setting the value for the next module",
											"pm.collectionVariables.set(\"count\",0);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId1}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Scenarios",
					"item": [
						{
							"name": "UserCreation_w/o_mandatoryfields",
							"item": [
								{
									"name": "CreateUser_w/o_VisaStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\"\r\n \r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_TimeZone",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_RoleStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_RoleId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Role Id is mandatory\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_FirstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_LastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLastName must contain one or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_MiddleName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userMiddleName must contain one or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_PhoneNum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Phone Number is required\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_Email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"EmailId is required !\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber_S}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_LinkdinUrl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLinkedinUrlmust contain www.linkedin.com\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber_S}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_comment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userComments must begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber_S}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_userEduPg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber_S}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateUser_w/o_userEduUg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"update\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": \"{{userPhoneNumber_S}}\",\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UserCreation_InvalidFieldData",
							"item": [
								{
									"name": "UserCreation_Invalid_Comment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"@@\");\r",
													"pm.variables.set(\"userEduPg_S\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userComments must begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_userEduPg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"#$#\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userEduPgmust begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_userEduUg",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg\",\"&&\");\r",
													"pm.variables.set(\"userFirstName\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userEduUg must begin with alphabet and can contain only alphanumeric characters\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments}}\",\r\n  \"userEduPg\": \"{{userEduPg}}\",\r\n  \"userEduUg\": \"{{userEduUg}}\",\r\n  \"userFirstName\": \"{{userFirstName}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_phone",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"A123\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail_S\",\"abc2354@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",\"45\");\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Enter phone no in this format (CountryCode)(PhoneNo) +91 1234567890\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_RoleId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"A123\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"AB\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail_S\",\"abc2354@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",\"456776544\");\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Failed to create user, as 'roleId' is invalid !! \");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_RoleStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee_S\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"&*\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"@@\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_FirstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"@@\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_userLastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"#&\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLastName must contain one or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_MiddleName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"Test\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"#&\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userMiddleName must contain one or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_Email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"//var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",ranNum);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"Last\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userMiddleName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "UserCreation_Invalid_LinkedinUrl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const ranNum = Math.floor(Math.random() * 10000000000);\r",
													"pm.variables.set(\"userPhoneNumber_S\",ranNum);\r",
													"\r",
													"var email=( \"APIChallengersDee\" + pm.variables.replaceIn('{{$randomInt}}')+\"@gmail.com\");\r",
													"pm.variables.set(\"userLoginEmail_S\",email);\r",
													"\r",
													"\r",
													"pm.variables.set(\"userComments_S\",\"Test1\");\r",
													"pm.variables.set(\"userEduPg_S\",\"Btech\");\r",
													"pm.variables.set(\"userEduUg_S\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId_S\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"Last\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"fg\");\r",
													"\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLinkedinUrlmust contain www.linkedin.com\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"Canada\",\r\n  \"userLogin\": {\r\n    \"loginStatus\": \"string\",\r\n    \"password\": \"string\",\r\n    \"roleIds\": [\r\n      \"string\"\r\n    ],\r\n    \"status\": \"string\",\r\n    \"userLoginEmail\": \"{{userLoginEmail_S}}\"\r\n  },\r\n  \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userRoleMaps\": [\r\n    {\r\n      \"roleId\": \"{{roleId_S}}\",\r\n      \"userRoleStatus\": \"{{userRoleStatus_S}}\"\r\n    }\r\n  ],\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "UpdateUser_InvalidData",
							"item": [
								{
									"name": "UpdateUser_Invalid_FirstName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userComments\",\"Update\");\r",
													"pm.variables.set(\"userEduPg\",\"BCA\");\r",
													"pm.variables.set(\"userEduUg\",\"Mtech\");\r",
													"pm.variables.set(\"userFirstName_S\",\"@!\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"LastName\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail\",\"update2356@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",\"87877878\");\r",
													"pm.variables.set(\"userTimeZone_S\",\"PST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userFirstName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"{{userLocation_S}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_Invalid_LastName",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"@!\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail\",\"update2356@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",\"87877878\");\r",
													"pm.variables.set(\"userTimeZone_S\",\"IST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLastName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"{{userLocation_S}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_Invalid_phone",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"@!\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail\",\"update2356@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",23);\r",
													"pm.variables.set(\"userTimeZone_S\",\"IST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H4-EAD\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"userLastName must contain two or more alphabets only\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"{{userLocation_S}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_Invalid_VisaStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"@!\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail\",\"update2356@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",23);\r",
													"pm.variables.set(\"userTimeZone_S\",\"IST\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H11\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Failed to update user, as 'Visa Status' is invalid !! \");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"{{userLocation_S}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_Invalid_TimeZone",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userFirstName_S\",\"APIChallengers\");\r",
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");\r",
													"pm.variables.set(\"userLastName_S\",\"@!\");\r",
													"pm.variables.set(\"userLinkedinUrl_S\",\"https://www.linkedin.com/in/student/\");\r",
													"pm.variables.set(\"userLoginEmail\",\"update2356@gmail.com\");\r",
													"pm.variables.set(\"userMiddleName_S\",\"midd\");\r",
													"pm.variables.set(\"userPhoneNumber_S\",23);\r",
													"pm.variables.set(\"userTimeZone_S\",\"8\");\r",
													"pm.variables.set(\"userVisaStatus_S\",\"H1B\");\r",
													"pm.variables.set(\"userRoleStatus_S\",\"ns\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Failed to update user, as 'TimeZone' is invalid !! \");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userComments\": \"{{userComments_S}}\",\r\n  \"userEduPg\": \"{{userEduPg_S}}\",\r\n  \"userEduUg\": \"{{userEduUg_S}}\",\r\n  \"userFirstName\": \"{{userFirstName_S}}\",\r\n  \"userId\": \"string\",\r\n  \"userLastName\": \"{{userLastName_S}}\",\r\n \"userMiddleName\": \"{{userMiddleName_S}}\",\r\n  \"userLinkedinUrl\": \"{{userLinkedinUrl_S}}\",\r\n  \"userLocation\": \"{{userLocation_S}}\",\r\n   \"userPhoneNumber\": {{userPhoneNumber_S}},\r\n  \"userTimeZone\": \"{{userTimeZone_S}}\",\r\n  \"userVisaStatus\": \"{{userVisaStatus_S}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleIDwith_InvalidRoleID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Validate Status Code Text",
													"pm.test(\"Status should be Bad Request\", function () {",
													"    pm.response.to.have.status(\"Bad Request\");",
													"});",
													"//Validate Response Body data",
													"var resopnse=pm.response.json();",
													"pm.test(\"Validating Response body message\", ()=> {",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");",
													"    pm.expect(resopnse.message).to.eql(\"Invalid role id\");",
													"    pm.expect(resopnse.success).to.eql(false);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"userRoleList\",\"5$\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    \"{{userRoleList}}\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleId/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleId",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UPDATE User RoleId with invalid userId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"//Validate Status Code Text",
													"pm.test(\"Status should be Not Found\", function () {",
													"    pm.response.to.have.status(\"Not Found\");",
													"});",
													"//Validate Response Body data",
													"var resopnse=pm.response.json();",
													"pm.test(\"Validating Response body message\", ()=> {",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");",
													"    pm.expect(resopnse.message).to.eql(\"UserID: ghsh Not Found\");",
													"    pm.expect(resopnse.success).to.eql(false);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"userRoleList\": [\n    \"{{Role3}}\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleId/ghsh",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleId",
												"ghsh"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_LoginStatusWith_InvaliduserID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set(\"loginStatus\",\"tt\");\r",
													"pm.variables.set(\"password\",\"&&\");\r",
													"pm.variables.set(\"roleIds\",\"R01\");\r",
													"pm.variables.set(\"status\",\"Active\");\r",
													"pm.variables.set(\"userLoginEmail\",\"R01\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"UserID: sdd Not Found\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"loginStatus\": \"{{loginStatus}}\",\n  \"password\": \"{{password}}\",\n  \"roleIds\": [\n    \"{{roleIds}}\"\n  ],\n  \"status\": \"{{status}}\",\n  \"userLoginEmail\": \"{{userLoginEmail}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/userLogin/sdd",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"userLogin",
												"sdd"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_LoginStatusWith_InvalidLoginStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													"pm.variables.set(\"loginStatus\",\"invalid\");\r",
													"pm.variables.set(\"password\",\"&&\");\r",
													"pm.variables.set(\"roleIds\",\"R01\");\r",
													"pm.variables.set(\"status\",\"Active\");\r",
													"pm.variables.set(\"userLoginEmail\",\"yy\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"loginStatus\": \"{{loginStatus_S}}\",\n  \"password\": \"{{password_S}}\",\n  \"roleIds\": [\n    \"{{}}\"\n  ],\n  \"status\": \"{{status_S}}\",\n  \"userLoginEmail\": \"{{userLoginEmail_S}}\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/userLogin/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"userLogin",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleProgram_invalidUserID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"programId\",\"R01\");\r",
													"pm.variables.set(\"roleId\",\"775\");\r",
													"pm.variables.set(\"userId\",\"R01\");\r",
													"pm.variables.set(\"batchId\",\"775\");\r",
													"pm.variables.set(\"userRoleProgramBatchStatus\",\"R01\");\r",
													"pm.variables.set(\"roleId\",\"775\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programId\": {{programId2}},\n  \"roleId\": \"{{roleId}}\",\n  \"userId\": \"{{userId1}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{BatchIdUser1}},\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}//users/roleProgramBatchStatus/{{userId3}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"",
												"users",
												"roleProgramBatchStatus",
												"{{userId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleProgram_invalidProgramID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"programId\",\"ADAD\");\r",
													"pm.variables.set(\"roleId\",\"775\");\r",
													"pm.variables.set(\"userId\",\"R01\");\r",
													"pm.variables.set(\"batchId\",\"775\");\r",
													"pm.variables.set(\"userRoleProgramBatchStatus\",\"R01\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programId\": {{programId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userId\": \"{{userId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{batchId}},\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleProgramBatchStatus/U407",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleProgramBatchStatus",
												"U407"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleProgram_invalidBatchID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"programId\",\"R01\");\r",
													"pm.variables.set(\"roleId\",\"775\");\r",
													"pm.variables.set(\"userId\",\"R01\");\r",
													"pm.variables.set(\"batchId\",\"775\");\r",
													"pm.variables.set(\"userRoleProgramBatchStatus\",\"R01\");\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"programId\": {{programId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userId\": \"{{userId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{batchId}},\n      \"userRoleProgramBatchStatus\": \"{{userRoleProgramBatchStatus}}\"\n    }\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleProgramBatchStatus/hgjj",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleProgramBatchStatus",
												"hgjj"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleStatusWith_DiffrentRoleID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"roleId\",\"R02\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"RoleID: \"+pm.variables.get(\"roleId\")+\" not found for the UserID: U407\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});\r",
													"\r",
													"  //pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role3\")+\"already exists for user \"+pm.globals.get(\"userId2\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus/{{userId1}}",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus",
												"{{userId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleStatusWith_invalidUserID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"Active\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"\r",
													"  //pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role3\")+\"already exists for user \"+pm.globals.get(\"userId2\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus/6ddf",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus",
												"6ddf"
											]
										}
									},
									"response": []
								},
								{
									"name": "UpdateUser_RoleStatusWith_invalidStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"roleId\",\"R01\");\r",
													"pm.variables.set(\"userRoleStatus\",\"775\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate status code\r",
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"//Validate Status Code Text\r",
													"pm.test(\"Status should be Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"//Validate Response Body data\r",
													"var resopnse=pm.response.json();\r",
													"pm.test(\"Validating Response body message\", ()=> {\r",
													"   // pm.expect(resopnse.status).to.eql(\"400 BAD_REQUEST\");\r",
													"    pm.expect(resopnse.message).to.eql(\"Invalid Status: must be Active or Inactive\");\r",
													"    pm.expect(resopnse.success).to.eql(false);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BaseURL}}/users/roleStatus/6ddf",
											"host": [
												"{{BaseURL}}"
											],
											"path": [
												"users",
												"roleStatus",
												"6ddf"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "User Role Map",
			"item": [
				{
					"name": "GET assigned Program/Batch for all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"//Parsing the json response ",
									"var response=pm.response.json();",
									"console.log(response);",
									"",
									"//Json Schema ",
									"const expectedSchema=",
									"{",
									"  \"type\": \"array\",",
									"  \"items\": [",
									"    {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"userId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"roleId\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"programId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"batchId\": {",
									"          \"type\": \"integer\"",
									"        },",
									"        \"userRoleProgramBatchStatus\": {",
									"          \"type\": \"string\"",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"userId\",",
									"        \"roleId\",",
									"        \"programId\",",
									"        \"batchId\",",
									"        \"userRoleProgramBatchStatus\"",
									"      ]",
									"    }",
									"  ]",
									"};",
									"//JSON Schema Validation",
									"pm.test('Validating JSON Schema using AJV',  ()=> {",
									"    pm.response.to.have.jsonSchema(expectedSchema);  ",
									"});",
									"",
									"pm.test('Validating JSON Schema using Tiny Validator', function () {",
									"    pm.expect(tv4.validate(response, expectedSchema)).to.be.true;",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assigned Program/Batches of all Users Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/{{userId3}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assigned Program/Batches of all Users Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									"",
									"//Validate Response Body Type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"//Validate Response Header value",
									"pm.test(\"Content-type header is application/json\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/{{userId2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Assigned Program/Batches of all Users Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Parsing the json response ",
									"var response=pm.response.json();",
									"console.log(response);",
									"",
									"",
									"//Validate Status Code",
									"pm.test(\"Status code is 200 or 404\",  () =>{",
									"  pm.expect(pm.response.code).to.be.oneOf([200,404])",
									"});",
									"",
									"//Validate Status Code Text",
									"// if(response.code==\"200\")",
									"// {",
									"// pm.test(\"Validating 200 Response Body\", ()=> {",
									"//     pm.expect(pm.response.json().status).to.eql(\"400 Bad request\");",
									"//       pm.expect(pm.response.json().message).to.eql(\"Role \"+pm.globals.get(\"Role2\")+\"already exists for user \"+pm.globals.get(\"userId1\"));",
									"// });",
									"// }",
									"",
									"if(response.code==\"404\")",
									"{",
									"    var response=pm.response.json();",
									"pm.test(\"Validating 404 Response Body\", ()=> {",
									"    pm.expect(pm.response.json().status).to.eql(\"404 Not Found\");",
									"      pm.expect(pm.response.json().message).to.eql(\"UserRoleProgramBatchMap not found with id : \"+pm.globals.get(\"userId1\"));",
									"});",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/userRoleProgramBatchMap/deleteAll/{{userId2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"userRoleProgramBatchMap",
								"deleteAll",
								"{{userId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data CleanUp",
			"item": [
				{
					"name": "DELETE User-Student",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.text()).to.include(\"Deleted User ID:  \");",
									"   ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId3}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE User- Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.text()).to.include(\"Deleted User ID:  \");",
									"   ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/{{userId2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Batch by valid Batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Response Header\r",
									"pm.test(\"Content-Type is present\",  () =>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"//Validate Response Header value\r",
									"pm.test(\"Connection header is keep-alive\",  ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")\r",
									"});\r",
									"\r",
									"//Validate Response Body Type\r",
									"// pm.test(\"Response body should be JSON\", () =>{\r",
									"//   pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"//Validate Response Header value\r",
									"pm.test(\"Content-type header is application/json\",  ()=> {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\")\r",
									"});\r",
									"\r",
									"\r",
									"//Validate Status Code\r",
									"pm.test(\"Checking status 200\",()=>{\r",
									"     pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Status Code Text\r",
									"pm.test(\"Status should be OK\", ()=> {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// Setting the value for the next module\r",
									"pm.collectionVariables.set(\"batchId\",pm.collectionVariables.get(\"batchId2\"));\r",
									"pm.collectionVariables.set(\"count\",0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/{{BatchUserId2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"{{BatchUserId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete  Program by programId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deletebyprogid/{{programId2}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogid",
								"{{programId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Log Out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"//Validate Status Code Text",
									"pm.test(\"Status should be OK\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"//Validate Response Body data",
									"pm.test(\"Validating Response body message\", ()=> {",
									"    pm.expect(pm.response.text()).to.eql(\"Logout successful\");",
									"   ",
									"});",
									"",
									"//Validate Response Header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"//Validate Response Header value",
									"",
									"pm.test(\"Connection header is keep-alive\",  ()=> {",
									"    pm.expect(pm.response.headers.get(\"Connection\")).to.eql(\"keep-alive\")",
									"});",
									"",
									"//Unset Variables",
									"",
									"pm.globals.unset(\"userId1\");",
									"pm.globals.unset(\"userId2\");",
									"pm.globals.unset(\"userId3\");",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/logoutlms",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"logoutlms"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{Token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Load data from json file to collection variable 'requestData'",
					"if(typeof pm.variables.get('requestData') !== 'object')",
					"{",
					"    pm.variables.set('requestData', pm.iterationData.toObject());",
					"}",
					"// Read input data from collection variable 'requestData'",
					"const requestData = pm.variables.get('requestData');",
					"",
					"// If 'requestData'/input data is empty",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)",
					"{",
					"    console.log('No external data provided/data set is empty');",
					"    return;",
					"}",
					"",
					"// Find current request's data",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];",
					"",
					"// If no data found for current request",
					"if(!currentRequest){",
					"    console.log('Request ${pm.info.requestName} has no data.');",
					"}",
					"",
					"// If data found for current request",
					"if(currentRequest){",
					"    // Expose variables",
					"    const variables = currentRequest.data.shift();",
					"",
					"    Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"    pm.variables.set('requestData', requestData);",
					"",
					"    // Declare next request",
					"    if(currentRequest.data.length > 0){",
					"        postman.setNextRequest(pm.info.requestName);",
					"    }",
					"}\t"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://lms-marchapi-hackathon-a258d2bbd43b.herokuapp.com/lms",
			"type": "string"
		},
		{
			"key": "invalidPassword",
			"value": "Numpyninja@12",
			"type": "string"
		},
		{
			"key": "invalidEmail",
			"value": "invalid@gmail.com",
			"type": "string"
		},
		{
			"key": "userComments",
			"value": "User1",
			"type": "string"
		},
		{
			"key": "userEduPg",
			"value": "Phd",
			"type": "string"
		},
		{
			"key": "userEduUg",
			"value": "Bsc",
			"type": "string"
		},
		{
			"key": "userFirstName",
			"value": "APIChallengers",
			"type": "string"
		},
		{
			"key": "userLastName",
			"value": "Two",
			"type": "string"
		},
		{
			"key": "userLinkedinUrl",
			"value": "https://www.linkedin.com/in/APIChallengers2/",
			"type": "string"
		},
		{
			"key": "userLocation",
			"value": "New York",
			"type": "string"
		},
		{
			"key": "userLoginEmail",
			"value": "APIChallengersDee1@gmail.com",
			"type": "string"
		},
		{
			"key": "userMiddleName",
			"value": "Dee",
			"type": "string"
		},
		{
			"key": "userPhoneNo",
			"value": "7667923456",
			"type": "string"
		},
		{
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"key": "userTimeZone",
			"value": "PST",
			"type": "string"
		},
		{
			"key": "userVisaStatus",
			"value": "H4-EAD",
			"type": "string"
		},
		{
			"key": "putUserComments",
			"value": "User Comments Updated",
			"type": "string"
		},
		{
			"key": "putuserEduPg",
			"value": "Not applicable",
			"type": "string"
		},
		{
			"key": "putuserEduUg",
			"value": "BE",
			"type": "string"
		},
		{
			"key": "putuserFirstName",
			"value": "Updated",
			"type": "string"
		},
		{
			"key": "putuserLastName",
			"value": "APIChallengers",
			"type": "string"
		},
		{
			"key": "putuserLinkedinUrl",
			"value": "https://www.linkedin.com/in/APIChallengersUpdate/",
			"type": "string"
		},
		{
			"key": "putuserLocation",
			"value": "Texas",
			"type": "string"
		},
		{
			"key": "putUserMiddleName",
			"value": "Team",
			"type": "string"
		},
		{
			"key": "putTimeZone",
			"value": "MST",
			"type": "string"
		},
		{
			"key": "putVisaStatus",
			"value": "Not-Specified",
			"type": "string"
		},
		{
			"key": "programStatus1",
			"value": "Active",
			"type": "string"
		},
		{
			"key": "programStatus2",
			"value": "Inactive",
			"type": "string"
		},
		{
			"key": "batchDesc",
			"value": "Programming for SDET",
			"type": "string"
		},
		{
			"key": "batchDesc2",
			"value": "Python for Data Analyst",
			"type": "string"
		},
		{
			"key": "PrgDesc1",
			"value": "Basic Course",
			"type": "string"
		},
		{
			"key": "PrgDesc2",
			"value": "Advanced Course",
			"type": "string"
		},
		{
			"key": "PrgDesc3",
			"value": "Full Course",
			"type": "string"
		},
		{
			"key": "batchNoOfClasses",
			"value": "10",
			"type": "string",
			"disabled": true
		},
		{
			"key": "batchStatus",
			"value": "Active",
			"type": "string",
			"disabled": true
		},
		{
			"key": "teamName",
			"value": "APIChallengers",
			"type": "string"
		},
		{
			"key": "invalidSearchString",
			"value": "asd@123",
			"type": "string"
		},
		{
			"key": "Status",
			"value": "Inactive",
			"type": "string"
		},
		{
			"key": "invalidprogramID",
			"value": "",
			"type": "string"
		},
		{
			"key": "invalidprogramID1",
			"value": "134",
			"type": "string"
		},
		{
			"key": "invalidprogramName",
			"value": "abc",
			"type": "string"
		},
		{
			"key": "programId1",
			"value": ""
		},
		{
			"key": "programId2",
			"value": ""
		},
		{
			"key": "programName1",
			"value": ""
		},
		{
			"key": "programName2",
			"value": ""
		},
		{
			"key": "BatchIdUser1",
			"value": ""
		},
		{
			"key": "BatchIdUser2",
			"value": "",
			"type": "string"
		},
		{
			"key": "count",
			"value": "0",
			"type": "string"
		},
		{
			"key": "programId",
			"value": ""
		},
		{
			"key": "batchClasses",
			"value": ""
		},
		{
			"key": "description",
			"value": ""
		},
		{
			"key": "batchName",
			"value": ""
		},
		{
			"key": "batchNoOfClasses",
			"value": ""
		},
		{
			"key": "batchDescription",
			"value": ""
		},
		{
			"key": "batchId1",
			"value": ""
		},
		{
			"key": "batchId2",
			"value": ""
		},
		{
			"key": "batchId",
			"value": ""
		},
		{
			"key": "batchName1",
			"value": ""
		},
		{
			"key": "batchName2",
			"value": ""
		},
		{
			"key": "BatcUserhId2",
			"value": ""
		},
		{
			"key": "batchStatus1",
			"value": ""
		},
		{
			"key": "batchStatus2",
			"value": ""
		},
		{
			"key": "BatchUserId2",
			"value": ""
		},
		{
			"key": "userId1",
			"value": ""
		},
		{
			"key": "userId2",
			"value": ""
		},
		{
			"key": "userId3",
			"value": ""
		},
		{
			"key": "programId4",
			"value": ""
		},
		{
			"key": "programName4",
			"value": ""
		},
		{
			"key": "programId5",
			"value": ""
		},
		{
			"key": "programName5",
			"value": ""
		}
	]
}